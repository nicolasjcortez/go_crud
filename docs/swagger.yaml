definitions:
  models.CreateUserRequest:
    properties:
      address:
        type: string
      age:
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - address
    - age
    - email
    - name
    - password
    type: object
  models.CreateUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      status:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  models.FindUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      status:
        type: string
    type: object
  models.FindUsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
      results:
        type: integer
      status:
        type: string
    type: object
  models.UpdateUser:
    properties:
      address:
        type: string
      age:
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.UpdateUserResponse:
    properties:
      data:
        $ref: '#/definitions/models.User'
      status:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      age:
        type: integer
      email:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - address
    - age
    - email
    - name
    type: object
info:
  contact: {}
paths:
  /api/users:
    get:
      consumes:
      - application/json
      description: Find users with pagination based on page and limit query parameters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FindUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Find users with pagination
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided user data
      parameters:
      - description: User data to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - Users
  /api/users/{userId}:
    delete:
      consumes:
      - application/json
      description: Delete a user by the provided user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user by ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Find a user by the provided user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FindUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Find a user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update an existing user with the provided user data
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an existing user
      tags:
      - Users
swagger: "2.0"
